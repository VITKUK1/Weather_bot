import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7504680458:AAHPQowdVf0OC0l-sSP-gA8exyGKHElQVPI"
WEATHER_API_KEY = "55dfe164f52d5a0d296b486466a7a0fa"
WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"
CAT_GIF_URL = "https://cataas.com/cat/gif"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö ---
user_cities = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ üåç"))

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã ---
async def get_weather(city):
    async with aiohttp.ClientSession() as session:
        params = {"q": city, "appid": WEATHER_API_KEY, "units": "metric", "lang": "ru"}
        async with session.get(WEATHER_URL, params=params) as response:
            if response.status == 200:
                data = await response.json()
                temp = data["main"]["temp"]
                desc = data["weather"][0]["description"]
                return f"üå§ –ü–æ–≥–æ–¥–∞ –≤ *{city}*: {temp}¬∞C, {desc}"
            else:
                return None

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è GIF –∫–æ—Ç–∏–∫–∞ ---
async def get_cat_gif():
    return CAT_GIF_URL  # –°–∞–π—Ç Cataas –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç –Ω–æ–≤–æ–µ GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –∫–æ—Ç–æ-–±–æ—Ç! üê±üå§\n–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏—Å—ã–ª–∞–ª —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑.", reply_markup=keyboard)

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞ ---
@dp.message_handler(lambda message: message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ üåç")
async def set_city(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

@dp.message_handler()
async def save_city(message: types.Message):
    user_cities[message.from_user.id] = message.text
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –≤ *{message.text}* –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üê±")

# --- –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ---
async def daily_weather():
    while True:
        for user_id, city in user_cities.items():
            weather = await get_weather(city)
            cat_gif = await get_cat_gif()
            if weather:
                await bot.send_message(user_id, weather, parse_mode="Markdown")
                await bot.send_animation(user_id, cat_gif)
        await asyncio.sleep(86400)  # –†–∞–∑ –≤ 24 —á–∞—Å–∞

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(daily_weather())
    executor.start_polling(dp, skip_updates=True)