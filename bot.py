import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

# === üîë API-–∫–ª—é—á–∏ ===
TOKEN = "7504680458:AAHPQowdVf0OC0l-sSP-gA8exyGKHElQVPI"
WEATHER_API_KEY = "55dfe164f52d5a0d296b486466a7a0fa"
CAT_API_KEY = "live_gM1zOn6z760Gh8qtj8nH5lyyRYY356PKrY5aHnVLeCmdT74x8eIi61h7chji66ab"

# === üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID -> –≥–æ—Ä–æ–¥)
user_data = {}

# === üå§Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã ===
async def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                temp = data["main"]["temp"]
                weather_desc = data["weather"][0]["description"]
                return f"–°–µ–π—á–∞—Å –≤ {city}: {temp}¬∞C, {weather_desc}"
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üòî"

# === üê± –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫–æ—Ç–∏–∫–∞ ===
async def get_random_cat_video():
    url = "https://api.thecatapi.com/v1/images/search?mime_types=video/mp4"
    headers = {"x-api-key": CAT_API_KEY}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                for item in data:
                    if item.get("url", "").endswith(".mp4"):
                        return item["url"]
    return None

# === üïí –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ===
async def send_daily_weather(user_id, city):
    while True:
        try:
            weather = await get_weather(city)
            await bot.send_message(user_id, f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû\n{weather}")

            cat_video = await get_random_cat_video()
            if cat_video:
                await bot.send_video(user_id, cat_video)
            else:
                await bot.send_message(user_id, "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –∫–æ—Ç–∏–∫–∞ üòø")

            await asyncio.sleep(86400)  # –ñ–¥—ë–º 24 —á–∞—Å–∞
        except asyncio.CancelledError:
            logging.info(f"–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É {user_id}: {e}")
            await asyncio.sleep(60)

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–≥–æ–¥—ã
weather_tasks = {}

# === üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥) ===
@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    
    if user_id in user_data:
        await message.answer(f"–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {user_data[user_id]} üåç")
        await start_weather_task(user_id, user_data[user_id])
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í –∫–∞–∫–æ–º —Ç—ã –≥–æ—Ä–æ–¥–µ? üåç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# === üåé –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ —Å –≥–æ—Ä–æ–¥–æ–º ===
@dp.message(lambda message: message.from_user.id not in user_data)
async def set_city(message: Message):
    user_id = message.from_user.id
    city = message.text.strip()

    user_data[user_id] = city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ {city}. üå§Ô∏è")
    await start_weather_task(user_id, city)

# === üõë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '—Å—Ç–æ–ø' ===
@dp.message(lambda message: message.text.lower() == "—Å—Ç–æ–ø")
async def stop_weather(message: Message):
    user_id = message.from_user.id

    if user_id in weather_tasks:
        weather_tasks[user_id].cancel()
        del weather_tasks[user_id]
        await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚ùå")
    else:
        await message.answer("–ë–æ—Ç —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === üöÄ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ —Å –ø–æ–≥–æ–¥–æ–π ===
async def start_weather_task(user_id, city):
    if user_id in weather_tasks and not weather_tasks[user_id].done():
        return  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ

    weather_tasks[user_id] = asyncio.create_task(send_daily_weather(user_id, city))

# === üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())